I",S<h2 id="scope">Scope</h2>

<p>Lo <em>scope</em> è l’attuale contesto di esecuzione. Il contesto in cui i valori e le espressioni sono “visibili” o possono essere referenziati. Se una variabile o un’altra espressione non è “nell’ambito corrente”, non è disponibile per l’uso. Gli ambiti possono anche essere stratificati in una gerarchia, in modo che gli ambiti figlio abbiano accesso agli ambiti padre, ma non viceversa.</p>

<p>Una funzione funge da chiusura, <em>closure</em> in JavaScript e quindi crea uno scope, in modo che (ad esempio) non sia possibile accedere a una variabile definita esclusivamente all’interno della funzione dall’esterno della funzione o da altre funzioni.</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Scope">MDN - Scope</a></p>

<p>Esempio:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Scope */</span>

<span class="cm">/* Gloabl variable -&gt; Riconosciuta da tutto il programma */</span>
<span class="kd">let</span> <span class="nx">var1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">function1</span><span class="p">(){</span>
    <span class="cm">/* Local variable -&gt; ricnosciuta solo nel blocco di codice tra le parentesi {}  in cui è stata dichiarata*/</span>
    <span class="kd">let</span> <span class="nx">var2</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>         <span class="c1">//qui nasce var2</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">var2</span><span class="p">);</span>     
<span class="p">}</span>                          <span class="c1">//qui muore var2</span>

<span class="nx">function1</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">var1</span><span class="p">);</span> <span class="c1">//var1 is defined, var1 is global</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">var2</span><span class="p">);</span> <span class="c1">//var2 is not defined</span>

<span class="cm">/*
Console:
---------------
10
1
Uncaught ReferenceError: var2 is not defined
*/</span>
</code></pre></div></div>

<p>Vediamo un esempio molto più complesso:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Scope */</span>

<span class="cm">/* Gloabl variable -&gt; Riconosciuta da tutto il programma */</span>
<span class="kd">let</span> <span class="nx">var1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">function1</span><span class="p">(){</span>
    <span class="cm">/* Local variable -&gt; ricnosciuta solo nel blocco di codice tra le parentesi {}  in cui è stata dichiarata*/</span>
    <span class="kd">let</span> <span class="nx">var2</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>         <span class="c1">//qui nasce var2</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">var2 function1 : </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">var2</span><span class="p">);</span>   
<span class="p">}</span>                          <span class="c1">//qui muore var2</span>

<span class="kd">function</span> <span class="nx">function2</span><span class="p">(){</span>
    <span class="cm">/* Local variable -&gt;   ricnosciuta solo nel blocco di codice tra le parentesi {}  in cui è stata dichiarata*/</span>
    <span class="kd">let</span> <span class="nx">var2</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>         <span class="c1">//qui nasce var2 ma è diversa rispetto a quella di prima, è una nuova var2</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">var2 function2 : </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">var2</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">var1: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">var1</span><span class="p">);</span>     <span class="c1">//è riconosciuta anche var1 perchè è stata dichiarata in un blocco più esterno</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">var3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">var3</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">var3</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">var3: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">var3</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">var2 function2: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">var2</span><span class="p">);</span>   <span class="c1">//è riconosciuta anche var2 perchè è stata dichiarata in un blocco più esterno</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">var1: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">var1</span><span class="p">);</span>             <span class="c1">//è riconosciuta anche var1 perchè è stata dichiarata in un blocco più esterno</span>
    <span class="p">}</span>                                             <span class="c1">//qui muore var3</span>
<span class="p">}</span>                                                 <span class="c1">//qui muore var2</span>

<span class="nx">function1</span><span class="p">();</span>
<span class="nx">function2</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">var1: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">var1</span><span class="p">);</span>     <span class="c1">//OK</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">var3: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">var3</span><span class="p">);</span>     <span class="c1">//non riconosciuta</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">var2: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">var2</span><span class="p">);</span>     <span class="c1">//non riconosciuta</span>

<span class="cm">/*
Console:
---------------
var2 function1 : 10
var2 function2 : 20
var1: 1
var3: 0
var2 function2: 20
var1: 1
var1: 1
Uncaught ReferenceError: var3 is not defined
*/</span>
</code></pre></div></div>

<h2 id="visibilità-di-variabili">Visibilità di variabili</h2>

<p>Lo ‘scope’ di una variabile (visibilita’ di una variabile) e’ la sezione di codice 
in cui essa e’ visibile ed in Javascript e’ regolato con l’uso
delle funzioni.</p>

<p>NB: non confondere lo scope con il context (contesto) che indica invece l’oggetto
per il quale una funzione viene eseguita (<code class="language-plaintext highlighter-rouge">this</code>).
Per una funzione visibile a livello globale cioe’ non contenuta in alcun oggetto 
questo in realta’ esiste e coincide con ‘window’.</p>

<p>La distinzione e’ tra visibilita’ globale, locale e di blocco.</p>

<h2 id="visibilità-globale-global-scope">Visibilità Globale (global scope)</h2>

<p>E’ quella che ha come riferimento l’intero codice. Sono le variabili/oggetti dichiarate all’esterno di qualunque funzione usate in una funzione senza <code class="language-plaintext highlighter-rouge">var/let</code>. In generale <strong>la visibilita’ globale e’ da evitare</strong></p>

<p>Esempio:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">f_bad</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">//modifica la variabile esterna potenzialmente all'insaputa di chi la chiama</span>
  <span class="nx">x</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> 
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Prima di invocare f_bad() </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">x</span><span class="p">);</span> <span class="c1">//x = 100</span>
<span class="nx">f_bad</span><span class="p">();</span>    <span class="c1">//modifica x, da evitare</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Dopo f_bad() </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">x</span><span class="p">);</span> <span class="c1">//x = 2</span>
</code></pre></div></div>

<p>L’obiettivo delle funzioni è proprio racchiudere il codice in blocchi riutilizzabili. Se modificano/dipendono da variabili esterne/globali questo concetto viene a meno.</p>

<p>Per risolvere questa cosa:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="c1">//versione corretta di f</span>
<span class="kd">function</span> <span class="nx">f_good</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">//dichiarazione di una variabile LOCALE (x) distinta da quella globale</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> 
  <span class="kd">var</span> <span class="nx">y</span><span class="o">=</span><span class="mi">200</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Prima di invocare f_good() </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">x</span><span class="p">);</span> <span class="c1">// x = 100</span>
<span class="nx">f_good</span><span class="p">();</span> 
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Dopo f_good() </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">x</span><span class="p">);</span> <span class="c1">// x = 100, Ok</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span> <span class="c1">//errore: y not defined; visibile solo a f_good in esecuzione</span>
</code></pre></div></div>

<h2 id="scope-chaining">Scope Chaining</h2>
<p>Una varibaile è visibile ai blocchi interni (figli) ma non ai contenitori (padre). I blocchi interni (figli) ereditano tutto dai loro contenitori (padri) ma <em>i padri non conoscono i segreti dei figli</em> ovvero non possono conoscere le variabili/oggetti dichiarati dei figli.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="c1">//FUNZIONI ANNIDATE (nested)</span>
<span class="kd">function</span> <span class="nx">esterna</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">999</span><span class="p">;</span><span class="c1">// dichiaro una nuova "x" diversa da quella globale</span>
  <span class="nx">interna</span><span class="p">();</span>

  <span class="c1">//Accedo alla "x" esterna tramite il contest. &lt;window&gt; è il contesto esterno, è il contenitore di tutto</span>
  <span class="nb">window</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span> 
  <span class="c1">//interna accede anche allo scope di esterna ma non il viceversa</span>
  <span class="kd">function</span> <span class="nx">interna</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="c1">//code</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="visibilità-a-livello-di-blocco-block-scope">Visibilità a livello di blocco (block scope)</h2>

<p>La visibilità è racchiusa da i delimitatori <code class="language-plaintext highlighter-rouge">{ }</code></p>

<p>Per mantenere la visibilità a livello di blocco è necesario usare <code class="language-plaintext highlighter-rouge">let</code>, <code class="language-plaintext highlighter-rouge">var</code> mantiene soltanto lo scope locale a livello di funzione ma non di blocco <code class="language-plaintext highlighter-rouge">{ }</code></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">let</code>: Mantiene lo scope delle variabili sia a livello locale (all’interno di una funzione) sia livello di blocco ovvero tra i delimitatori <code class="language-plaintext highlighter-rouge">{ }</code></li>
  <li><code class="language-plaintext highlighter-rouge">var</code>: Mantiene lo scope delle variabili solo a livello locale (all’interno di una funzione) ma non a livello di blocco ovvero tra i delimitatori <code class="language-plaintext highlighter-rouge">{ }</code></li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//"var" non mantiene la visibilità di blocco</span>
<span class="kd">var</span> <span class="nx">x</span><span class="o">=</span><span class="mi">5</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mf">0.5</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">else</span>
<span class="p">{</span>
    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">200</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">La x ora vale: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">x</span><span class="p">);</span> <span class="c1">//100 o 200!! ATTENZIONE, </span>

<span class="c1">//"let" mantiene la visibilità di blocco</span>
<span class="nx">x</span><span class="o">=</span><span class="mi">5</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mf">0.5</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">else</span>
<span class="p">{</span>
    <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">200</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">La x globale vale ancora: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">x</span><span class="p">);</span>  <span class="c1">//5, ok </span>
</code></pre></div></div>

<h2 id="approfondimento---closure-di-una-funzione">Approfondimento - Closure di una funzione</h2>

<p>Si ricordi:</p>

<p><em>Una funzione funge da chiusura, closure in JavaScript e quindi crea uno scope, in modo che (ad esempio) non sia possibile accedere a una variabile definita esclusivamente all’interno della funzione dall’esterno della funzione o da altre funzioni</em></p>

<p>Applichiamo questo concetto ad un esempio pratico. <br />
La funzione:
<code class="language-plaintext highlighter-rouge">setInterval( param1, param2 )</code>: <em>param1</em> è una funzione, <em>param2</em> rappresenta un intervallo di tempo espresso in <code class="language-plaintext highlighter-rouge">ms</code>.
La funzione <code class="language-plaintext highlighter-rouge">setInterval()</code> chiama la funzione <em>param1</em> ogni <em>param2</em> <code class="language-plaintext highlighter-rouge">ms</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">chiamaMessaggio</span><span class="p">(</span><span class="nx">messaggio</span><span class="p">){</span>
    <span class="nx">setInterval</span><span class="p">(</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">writeln</span><span class="p">(</span><span class="nx">messaggio</span><span class="p">);},</span> <span class="mi">1000</span><span class="p">);</span> <span class="c1">//uso una funzione anonima</span>
<span class="p">}</span>

<span class="nx">chiamaMessaggio</span><span class="p">(</span><span class="dl">"</span><span class="s2">il sistema è in fase di spegnimento..</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p>Ho utilizzato il concetto di <em>closure</em> (e quindi dell’ereditarietà delle variabili/oggetti padre-&gt;figlio) di una funzione per passare un parametro alla funzione (parametro) di <code class="language-plaintext highlighter-rouge">setInterval()</code></p>

<p>Esempio 2:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">chiamaMessaggio2</span><span class="p">(</span><span class="nx">ilMessaggio</span><span class="p">,</span> <span class="nx">volte</span><span class="p">)</span>
<span class="p">{</span>

    <span class="kd">let</span> <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span> 
    <span class="kd">function</span> <span class="p">()</span>
    <span class="p">{</span>
        <span class="nx">writeln</span><span class="p">(</span><span class="nx">ilMessaggio</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">volte</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> secondi...</span><span class="dl">"</span><span class="p">);</span> 
        <span class="o">--</span><span class="nx">volte</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">volte</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">timer</span><span class="p">);</span> <span class="nx">writeln</span><span class="p">(</span><span class="dl">"</span><span class="s2">Boom!</span><span class="dl">"</span><span class="p">);}</span>
    <span class="p">}</span>
    <span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">chiamaMessaggio2</span><span class="p">(</span><span class="dl">"</span><span class="s2">Sistem Shutdown in </span><span class="dl">"</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>Approfondimento:</strong> Le funzioni che ricevono come parametri altre funzioni o ritornano altre funzioni prendono il nome di <em>High orderd function</em></p>

:ET