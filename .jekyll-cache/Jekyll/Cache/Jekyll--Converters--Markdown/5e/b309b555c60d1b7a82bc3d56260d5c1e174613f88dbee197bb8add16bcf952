I"nC<h2 id="variabili-javascript">Variabili Javascript</h2>

<p>Le variabili sono utilizzate per rappresentano dei valori attraverso un nome simbolico chiamato <strong>identificatore</strong>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">cognome</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Rossi</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">nome</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Mario</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">eta</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>

<span class="nx">pi</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>
</code></pre></div></div>

<p>Esistono tre tipi di <code class="language-plaintext highlighter-rouge">keyword</code> per la dichiarazione di variabili/costanti in JS.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">var</code>: Questa sintassi può essere usata per dichiarare sia variabili locali che globali</li>
  <li><code class="language-plaintext highlighter-rouge">let</code>: Introdotta nelle nuove versioni di JS può essere usata per dichiarare una variabile locale visibile in un blocco.</li>
  <li><code class="language-plaintext highlighter-rouge">const</code>: Introdotta nelle nuove versioni di JS è utilizzata per creare una costante in sola lettura.</li>
  <li>Possono inoltre dichiarare una variabile senza nessuna <code class="language-plaintext highlighter-rouge">keyword</code> (come fatto negli esempi precedenti) ma è da evitare perchè sarà l’interprete ad assegnare a tale variabile delle proprietà</li>
</ul>

<p>Per le variabili dichiarate con <code class="language-plaintext highlighter-rouge">let/var</code> valgono le seguenti regole:</p>

<ul>
  <li>Posso dichiarare una variabile e non inizializzarla. Se non inizializzata verrà attribuita ad essa il valore <code class="language-plaintext highlighter-rouge">undefined</code></li>
  <li>Posso assegnare il valore di una variabile successivamente nel programma e modificarne il contenuto a piacimento (Variable mutation)</li>
</ul>

<p>Per le variabili dichiarate con <code class="language-plaintext highlighter-rouge">const</code> valgono le seguenti regole:</p>

<ul>
  <li>Una costante non può cambiare il suo valore attraverso ulteriori assegnazioni o essere ridichiarata mentre lo script è in esecuzione.</li>
  <li>Deve essere sempre inizializzata ad un valore.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myVar</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>   <span class="c1">//OK, inizializzazione (dichiarazzione + assegnamento)</span>
<span class="nx">myVar</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>      <span class="c1">//OK, assegnamento</span>

<span class="kd">let</span> <span class="nx">myVar2</span><span class="p">;</span>      <span class="c1">//OK, solo dichiarazione</span>
<span class="nx">myVar2</span> <span class="o">=</span> <span class="mi">29</span><span class="p">;</span>     <span class="c1">//OK, assegnamento successivo alla dichiarazione</span>

<span class="kd">const</span> <span class="nx">myVar</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span> <span class="c1">//OK, inizializzazione (dichiarazione + assegnazione)</span>
<span class="nx">myVar</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>      <span class="c1">//EEROR!! - assegnazione successiva all'inizializzazione</span>

<span class="kd">const</span> <span class="nx">myVar2</span><span class="p">;</span>    <span class="c1">//EEROR!! - solo dichiarazione</span>
</code></pre></div></div>

<p><strong>Quando usare const, let o var</strong></p>

<p>E’ sempre meglio usare <code class="language-plaintext highlighter-rouge">const</code> per tutte le strutture dati che non cambiano nel tempo, è più sicuro. E’ necessario usare <code class="language-plaintext highlighter-rouge">let</code> o <code class="language-plaintext highlighter-rouge">var</code> solo per le variabili o strutture dati che cambiano valore nel tempo. Tra <code class="language-plaintext highlighter-rouge">let</code> e <code class="language-plaintext highlighter-rouge">var</code> è preferibile usare <code class="language-plaintext highlighter-rouge">let</code> per mantenere la regola della visibilità all’interno di un blocco (l’argomento visibilità delle variabili verrà trattato più avanti).</p>

<h2 id="tipi-di-dati-in-js">Tipi di dati in JS</h2>

<p>L’ultimo standard ECMAScript definisce sette tipi di dati:</p>

<ul>
  <li>Sei tipi di dato che sono <em>primitives</em>:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Boolean</code>. true e false.</li>
      <li><code class="language-plaintext highlighter-rouge">null</code>. Una parola chiave che denota un valore nullo.</li>
      <li><code class="language-plaintext highlighter-rouge">undefined</code>. Una proprietà il cui valore non è stato definito.</li>
      <li><code class="language-plaintext highlighter-rouge">Number</code>. 42 oppure 3.14159.</li>
      <li><code class="language-plaintext highlighter-rouge">String</code>. “Salve”</li>
      <li><code class="language-plaintext highlighter-rouge">Symbol</code> (nuovo in ECMAScript 2015). Un tipo di dato la cui istanza è unica e immutabile.</li>
    </ul>
  </li>
  <li>Due <em>Reference Type</em>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Object</code></li>
      <li><code class="language-plaintext highlighter-rouge">Array</code></li>
    </ul>
  </li>
</ul>

<p><strong>NOTA:</strong> <code class="language-plaintext highlighter-rouge">typeof</code> è una proprietà di Javascript che stampa (ritorna) il tipo di un oggetto o una variabile.</p>

<h2 id="dati-nativi">Dati nativi</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//String</span>
<span class="c1">//Le stringhe si indicano attraverso i singoli apici 'mystring'</span>
<span class="c1">//attraverso i doppi apici "myString" o l'accento grave `myString`</span>
<span class="kd">const</span> <span class="nx">nome</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">simone</span><span class="dl">'</span><span class="p">;</span> 

<span class="c1">//Number</span>
<span class="kd">const</span> <span class="nx">temp</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.5</span><span class="p">;</span>

<span class="c1">//Boolean</span>
<span class="kd">const</span> <span class="nx">isMaggiorenne</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

<span class="c1">//Null</span>
<span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="c1">//Interessante da vedere</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">value</span><span class="p">);</span>

<span class="c1">//Undefined</span>
<span class="kd">const</span> <span class="nx">cognome</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>

<span class="c1">//Symbol</span>
<span class="kd">const</span> <span class="nx">mySymbol</span> <span class="o">=</span> <span class="nb">Symbol</span><span class="p">();</span>
</code></pre></div></div>

<h2 id="reference-type">Reference type</h2>

<p>Gli array sono tipi di dato <em>Reference Type</em> utilizzati per raggruppare diversi dati appartenenti alla stessa categoria, ovvero un insieme di dati omogenei.
Gli object anch’essi <em>Reference Type</em> sono utilizzati per raggruppare qualità / caratteristiche di una struttura dati più complessa, in genere eterogenea.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Arrays</span>
<span class="kd">const</span> <span class="nx">nomi</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">simone</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">matteo</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">giovanni</span><span class="dl">'</span><span class="p">];</span>

<span class="c1">//Accedo ai campi di un array con l'operatore di indicizzazione []</span>
<span class="c1">//               0         1         2</span>
<span class="c1">//const nomi = ['simone', 'matteo', 'giovanni'];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">nomi</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span> <span class="c1">//matteo</span>

<span class="c1">//Objects</span>
<span class="kd">const</span> <span class="nx">persona</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">nome</span><span class="p">:</span> <span class="dl">'</span><span class="s1">simone</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">eta</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span>
    <span class="na">isMarry</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">}</span>

<span class="c1">//Accedo ai campi di un Object spcificando il nome della proprietà dell'oggetto</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">persona</span><span class="p">.</span><span class="nx">nome</span><span class="p">);</span> <span class="c1">//simone</span>
</code></pre></div></div>

<p>Formalizzeremo più avanti sia la struttura dei dati primitivi sia la struttura dei reference type.</p>

<h2 id="alcune-regole-generali-per-dichiarazione-di-variabili">Alcune regole generali per dichiarazione di variabili</h2>

<ul>
  <li>Usare sempre dei nomi significativi e esplicativi per le variabili</li>
  <li>Usare sempre il camelCase quando la variabile è composta da due o più parole</li>
  <li>Non si può usare un numero, un <code class="language-plaintext highlighter-rouge">#</code>, una <code class="language-plaintext highlighter-rouge">@</code>come inizio del nome di una variabile. E’ accettanto invece il simbolo`$</li>
  <li>Non si possono utilizzare, come identificatore, le keyword native di JS come: <code class="language-plaintext highlighter-rouge">function</code>, <code class="language-plaintext highlighter-rouge">if</code>, <code class="language-plaintext highlighter-rouge">delete</code> ..</li>
  <li>E’ possibile dichiarare più variabili/costanti nello stesso statement, separando le dichiarazioni con una virgola.</li>
</ul>

<p>Vediamo qualche esempio qua sotto:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Sintassi alternativa per dichiarare più costanti</span>
<span class="kd">const</span> <span class="nx">na</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
      <span class="nx">pigreco</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>
      <span class="nx">_iou</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="nx">$yui</span> <span class="o">=</span> <span class="mi">78</span><span class="p">;</span>
      <span class="nx">u</span><span class="o">-</span><span class="mi">1</span> <span class="o">=</span> <span class="mi">45</span><span class="p">;</span> <span class="c1">//ERROR!!</span>
      <span class="mi">1</span><span class="nx">T</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>   <span class="c1">//ERROR!!</span>
</code></pre></div></div>

<h2 id="reference-type-const">Reference type Const</h2>

<p><strong>ATTENZIONE:</strong> Se un oggetto/array è dichiarato <code class="language-plaintext highlighter-rouge">const</code> non significa che non è possibile modificare i campi all’interno ma solo che non posso cambiare la natura dell’oggetto/array. QUesto proprio perchè gli oggetti/arrays sono, a differenza dei dati primitivi, dei reference type. Il loro nome rappresenta solo l’indirizzo per accedere al dato in memoria e non il dato in memoria. Questo concetto per adesso può sembrare poco chiaro ma i reference type verranno trattati ampiamente nelle sezioni più avanti.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myObj</span> <span class="p">{</span>
    <span class="nl">nome</span><span class="p">:</span> <span class="dl">'</span><span class="s1">simone</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">cognome</span><span class="p">:</span> <span class="dl">'</span><span class="s1">di ricco</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">eta</span><span class="p">:</span> <span class="mi">34</span>
<span class="p">}</span>

<span class="nx">myObj</span><span class="p">.</span><span class="nx">nome</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">luca</span><span class="dl">'</span><span class="p">;</span> <span class="c1">//OK</span>
<span class="nx">myOby</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>           <span class="c1">//ERROR perchè in questo caso cambierei la natura dell'oggetto. Da oggetto diventerebbe un &lt;number&gt;</span>

<span class="kd">let</span> <span class="nx">myObj2</span> <span class="p">{</span>
    <span class="nl">ram</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="nx">rom</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
    <span class="nx">anno</span><span class="p">:</span> <span class="mi">2010</span>
<span class="p">}</span>

<span class="nx">myObj2</span><span class="p">.</span><span class="nx">ram</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>   <span class="c1">//OK</span>
<span class="nx">myObj2</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>      <span class="c1">//OK è permesso in JS. Ecco perchè si dovrebbe usare &lt;const&gt; invece di &lt;let&gt; quando è possibile</span>
</code></pre></div></div>

<h2 id="approfondimento-null---undefined---nan">Approfondimento Null - undefined - NaN</h2>

<p>Questa parte per adesso potrebbe essere troppo “approfondita”, è possibile saltarla senza pregiudicare il corso</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">undefined</code>: Si verifica quando un oggetto o una variabile non assume nessun valore</li>
  <li><code class="language-plaintext highlighter-rouge">null</code>: E’ un valore attributo in fase di programmazione per identificare che un dato oggetto o variabile non assume nessun valore. Differisce da <code class="language-plaintext highlighter-rouge">undefined</code> poichè <code class="language-plaintext highlighter-rouge">null</code> è previsto deliberatamente in fase di programmazione</li>
  <li><code class="language-plaintext highlighter-rouge">NaN</code>: Viene restituito quando <strong>l’espressione numerica</strong> valutata non restituisce un <code class="language-plaintext highlighter-rouge">Number</code></li>
</ul>

<p>Esempio 1:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">null</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">);</span> <span class="c1">//false</span>
</code></pre></div></div>

<p><strong>NOta:</strong> Per controllare gli stati di <em>null</em> e <em>undefined</em> è possibile utilizzare direttamente le keyword <code class="language-plaintext highlighter-rouge">null</code> e <code class="language-plaintext highlighter-rouge">undefined</code> come nell’esempio sopra illustrato. La stessa cosa non vale per <em>NaN</em>. In questo caso conviene utilizzare <code class="language-plaintext highlighter-rouge">IsNaN()</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Attenzione</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kc">NaN</span> <span class="o">!=</span> <span class="kc">NaN</span><span class="p">);</span> <span class="c1">//true !!!!</span>
</code></pre></div></div>

:ET